print = __builtin_print;


.: makeList = (first: Int, rest: Int..., last: Int): List => List(first, makeList(rest...));

.: operator(LOW +) [ :... ] = (es: Int...): Int... => makeList(es...);




List: Type = class {
    elm: Int = 0;
    rest: Any = "";
};

operator(LOW +) [: : :] = (a: Int, b: Int, c: Int): List => List(a, List(b, List(c)));

printList = (l: List) => {
    print(l.elm);
    __builtin_conditional(__builtin_eq(l.rest, ""), "", printList(l.rest));
};

list: List = [ 1 2 3 ];

printList(list);
