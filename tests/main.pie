print = __builtin_print;
true  = __builtin_true();
false = __builtin_false();

ifelse = __builtin_conditional;


prefix(PREFIX) if   = (expr) => expr;
infix (CALL  ) then = (cond, branch) => __builtin_conditional(cond, branch(), "magic=false=value");
infix (CALL  ) else = (cond, branch) => __builtin_conditional(__builtin_eq(cond, "magic=false=value"), branch(), cond);

infix (PROD  ) *    = (lhs, rhs) => __builtin_mul(lhs, rhs);
infix (SUM   ) +    = (lhs, rhs) => __builtin_add(lhs, rhs);
infix (SUM   ) -    = (lhs, rhs) => __builtin_sub(lhs, rhs);
infix (SUM - ) eq   = (lhs, rhs) => __builtin_eq(lhs, rhs);
infix (SUM - ) or   = (lhs, rhs) => __builtin_or(lhs, rhs);



fact = (n, f) => __builtin_conditional(__builtin_lt(n, 2), () => 1, () => n * f(n - 1, f)());

fi = (n, f) => __builtin_conditional(__builtin_lt(n, 2), () => 1, () => f(n - 1, f)() + f(n - 2, f)());
fib = (n) => fi(n, fi)();

suffix(POSTFIX) ! = (n) => fact(n, fact)();

print(5 !);
print(6 !);
print(7 !);

print(fib(5));
print(fib(6));
print(fib(7));
print(fib(8));


comment: ~$#%!-+ = 5;

comment: print(~$#%!-+);

comment: 1 = "Hi";
comment: x = 1;
comment: __builtin_reset(1);

comment: print(x);
comment: print(1);

comment: result = if __builtin_eq(x, 1) then x else "Bye";
comment: print(result);


